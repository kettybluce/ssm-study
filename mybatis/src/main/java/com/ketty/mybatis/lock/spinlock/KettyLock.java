package com.ketty.mybatis.lock.spinlock;import sun.misc.Unsafe;import java.lang.reflect.Field;import java.util.concurrent.atomic.AtomicInteger;/** * @Author ketty bluce * @Create 2023/5/24 * @Version 1.0 */public class KettyLock {    private static final Unsafe unsafe;    private static final long valueOffset;    static {        try {            Class<Unsafe> unsafeClass = Unsafe.class;            Field theUnsafe = unsafeClass.getDeclaredField("theUnsafe");            theUnsafe.setAccessible(true);            unsafe = (Unsafe) theUnsafe.get(null);            valueOffset = unsafe.objectFieldOffset                    (AtomicInteger.class.getDeclaredField("value"));        } catch (Exception ex) {            throw new Error(ex);        }    }    private volatile int value = 0;    public final int incrementAndGet() {        return unsafe.getAndAddInt(this, valueOffset, 1) + 1;    }    public void lock() {        for (; ; ) {            if (unsafe.compareAndSwapInt(this, valueOffset, 0, 1)) {                return;            }            Thread.currentThread().yield();        }    }    public void unlock() {        this.value = 0;    }}